---
description: 
globs: 
alwaysApply: false
---
# Prompt魔法书 v2.0 项目上下文规则

## 项目架构理解

### 核心文件结构
- [index.html](mdc:index.html) - 用户界面主文件，采用TailwindCSS样式
- [main.js](mdc:main.js) - 核心业务逻辑，当前基于localStorage的数据管理
- [style.css](mdc:style.css) - 自定义样式文件，苹果风格设计
- [manifest.json](mdc:manifest.json) - Chrome插件配置文件
- [development_v2.0.md](mdc:development_v2.0.md) - 开发进度跟踪文档

### 当前技术栈
- Chrome Extension Manifest V3
- 纯JavaScript ES6 (无框架依赖)
- TailwindCSS + 自定义CSS
- Chrome Storage API (localStorage)

## v2.0 升级目标

### 核心改进方向
1. **数据存储升级**: localStorage → Chrome Storage + Firebase Firestore
2. **认证系统**: 添加Google OAuth认证
3. **同步机制**: 实现本地优先的双向数据同步
4. **配置管理**: Firebase配置外部化

### 关键设计原则
- **本地优先**: UI始终从本地数据读取，保证响应速度
- **渐进增强**: 未登录时完整功能可用，登录后增加云同步
- **数据安全**: 用户数据优先保存在本地，云端作为备份和同步
- **向后兼容**: 确保现有用户数据平滑迁移

## 开发规范

### 代码质量要求
- 所有新增功能必须保持现有功能完整性
- 错误处理要完善，特别是网络相关操作
- 异步操作要正确处理Promise和错误情况
- 数据操作要保证原子性，避免数据丢失

### 模块化要求
- Firebase相关逻辑单独模块化
- 本地存储逻辑重构为独立模块
- 认证逻辑与业务逻辑分离
- 同步逻辑作为独立服务模块

### 测试验证
- 每个阶段完成后要进行完整的功能测试
- 特别关注边界情况：网络断连、配置缺失、数据冲突
- 确保在各种状态下的用户体验一致性
- 每轮测试需要人工时，需生成给用户的测试指导文档

## 用户体验原则

### 性能要求
- UI响应时间不能因为云同步功能增加而变慢
- 网络操作要有适当的loading状态提示
- 大量数据时要考虑分页或虚拟滚动

### 用户反馈
- 所有异步操作要有明确的状态反馈
- 错误信息要用户友好且具有指导性
- 成功操作要有适当的确认提示

## 当前开发状态
- 项目处于v2.0开发启动阶段
- 基础架构分析已完成
- 开发计划已制定，等待Phase 1执行
- 需要先完成Firebase配置和基础认证功能

## 重要注意事项
- 修改任何现有功能时要确保向下兼容
- 新增的时间戳字段要为现有数据提供默认值
- Chrome Storage API的权限配置需要在manifest中声明
- Firebase配置文件要在.gitignore中正确排除

